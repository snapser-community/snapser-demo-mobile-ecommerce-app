/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryConsumable } from './InventoryConsumable';
import {
    InventoryConsumableFromJSON,
    InventoryConsumableFromJSONTyped,
    InventoryConsumableToJSON,
} from './InventoryConsumable';
import type { InventoryContainer } from './InventoryContainer';
import {
    InventoryContainerFromJSON,
    InventoryContainerFromJSONTyped,
    InventoryContainerToJSON,
} from './InventoryContainer';
import type { InventoryPurchasable } from './InventoryPurchasable';
import {
    InventoryPurchasableFromJSON,
    InventoryPurchasableFromJSONTyped,
    InventoryPurchasableToJSON,
} from './InventoryPurchasable';
import type { InventorySubInventory } from './InventorySubInventory';
import {
    InventorySubInventoryFromJSON,
    InventorySubInventoryFromJSONTyped,
    InventorySubInventoryToJSON,
} from './InventorySubInventory';

/**
 * 
 * @export
 * @interface InventoryCatalogItem
 */
export interface InventoryCatalogItem {
    /**
     * An arbitrary string storing classname of the item
     * @type {string}
     * @memberof InventoryCatalogItem
     */
    className: string;
    /**
     * 
     * @type {InventoryConsumable}
     * @memberof InventoryCatalogItem
     */
    consumable?: InventoryConsumable;
    /**
     * 
     * @type {InventoryContainer}
     * @memberof InventoryCatalogItem
     */
    container?: InventoryContainer;
    /**
     * Description of item
     * @type {string}
     * @memberof InventoryCatalogItem
     */
    description?: string;
    /**
     * Display name of the item
     * @type {string}
     * @memberof InventoryCatalogItem
     */
    displayName: string;
    /**
     * Additional metadata to attach to inventory item
     * @type {object}
     * @memberof InventoryCatalogItem
     */
    metadata?: object;
    /**
     * Name of the item, has to be unique in the catalog
     * @type {string}
     * @memberof InventoryCatalogItem
     */
    name: string;
    /**
     * 
     * @type {InventoryPurchasable}
     * @memberof InventoryCatalogItem
     */
    purchasable?: InventoryPurchasable;
    /**
     * True if item can be stacked, a stackable item only
     * @type {boolean}
     * @memberof InventoryCatalogItem
     */
    stackable: boolean;
    /**
     * 
     * @type {InventorySubInventory}
     * @memberof InventoryCatalogItem
     */
    subInventory?: InventorySubInventory;
    /**
     * Tags associated with the item
     * @type {Array<string>}
     * @memberof InventoryCatalogItem
     */
    tags?: Array<string>;
    /**
     * True if item is tradable
     * @type {boolean}
     * @memberof InventoryCatalogItem
     */
    tradable: boolean;
    /**
     * Time after which item will be removed from user inventory
     * @type {number}
     * @memberof InventoryCatalogItem
     */
    ttl?: number;
}

/**
 * Check if a given object implements the InventoryCatalogItem interface.
 */
export function instanceOfInventoryCatalogItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "className" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "stackable" in value;
    isInstance = isInstance && "tradable" in value;

    return isInstance;
}

export function InventoryCatalogItemFromJSON(json: any): InventoryCatalogItem {
    return InventoryCatalogItemFromJSONTyped(json, false);
}

export function InventoryCatalogItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryCatalogItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'className': json['class_name'],
        'consumable': !exists(json, 'consumable') ? undefined : InventoryConsumableFromJSON(json['consumable']),
        'container': !exists(json, 'container') ? undefined : InventoryContainerFromJSON(json['container']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayName': json['display_name'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'name': json['name'],
        'purchasable': !exists(json, 'purchasable') ? undefined : InventoryPurchasableFromJSON(json['purchasable']),
        'stackable': json['stackable'],
        'subInventory': !exists(json, 'sub_inventory') ? undefined : InventorySubInventoryFromJSON(json['sub_inventory']),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'tradable': json['tradable'],
        'ttl': !exists(json, 'ttl') ? undefined : json['ttl'],
    };
}

export function InventoryCatalogItemToJSON(value?: InventoryCatalogItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'class_name': value.className,
        'consumable': InventoryConsumableToJSON(value.consumable),
        'container': InventoryContainerToJSON(value.container),
        'description': value.description,
        'display_name': value.displayName,
        'metadata': value.metadata,
        'name': value.name,
        'purchasable': InventoryPurchasableToJSON(value.purchasable),
        'stackable': value.stackable,
        'sub_inventory': InventorySubInventoryToJSON(value.subInventory),
        'tags': value.tags,
        'tradable': value.tradable,
        'ttl': value.ttl,
    };
}

