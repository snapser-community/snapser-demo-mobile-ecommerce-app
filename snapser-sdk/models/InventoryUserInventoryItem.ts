/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InventoryUserInventoryItem
 */
export interface InventoryUserInventoryItem {
    /**
     * Timestamp when player acquired the item
     * @type {string}
     * @memberof InventoryUserInventoryItem
     */
    acquiredAt?: string;
    /**
     * name of catalog item
     * @type {string}
     * @memberof InventoryUserInventoryItem
     */
    catalogItemName?: string;
    /**
     * Timestamp when the item will be removed from player inventory
     * @type {string}
     * @memberof InventoryUserInventoryItem
     */
    expiresAt?: string;
    /**
     * Instance id of the inventory item
     * @type {string}
     * @memberof InventoryUserInventoryItem
     */
    instanceId?: string;
    /**
     * Metadata attached with instance of item in player's inventory. Not to be confused with metadata in catalog inventory item
     * @type {object}
     * @memberof InventoryUserInventoryItem
     */
    instanceMetadata?: object;
    /**
     * True if this item is a sub-inventory
     * @type {boolean}
     * @memberof InventoryUserInventoryItem
     */
    isSubInventory?: boolean;
    /**
     * Timestamp when item was last consumed. In case of stackables, it is the timestamp of last consumed item of the stack
     * @type {string}
     * @memberof InventoryUserInventoryItem
     */
    lastConsumedAt?: string;
    /**
     * Count of times the item can been used
     * @type {number}
     * @memberof InventoryUserInventoryItem
     */
    remainingUses?: number;
    /**
     * Id of the sub-inventory where this item lives (if any)
     * @type {string}
     * @memberof InventoryUserInventoryItem
     */
    subInventoryInstanceId?: string;
    /**
     * Items in the sub-inventory
     * @type {Array<InventoryUserInventoryItem>}
     * @memberof InventoryUserInventoryItem
     */
    subInventoryItems?: Array<InventoryUserInventoryItem>;
}

/**
 * Check if a given object implements the InventoryUserInventoryItem interface.
 */
export function instanceOfInventoryUserInventoryItem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryUserInventoryItemFromJSON(json: any): InventoryUserInventoryItem {
    return InventoryUserInventoryItemFromJSONTyped(json, false);
}

export function InventoryUserInventoryItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryUserInventoryItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'acquiredAt': !exists(json, 'acquired_at') ? undefined : json['acquired_at'],
        'catalogItemName': !exists(json, 'catalog_item_name') ? undefined : json['catalog_item_name'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : json['expires_at'],
        'instanceId': !exists(json, 'instance_id') ? undefined : json['instance_id'],
        'instanceMetadata': !exists(json, 'instance_metadata') ? undefined : json['instance_metadata'],
        'isSubInventory': !exists(json, 'is_sub_inventory') ? undefined : json['is_sub_inventory'],
        'lastConsumedAt': !exists(json, 'last_consumed_at') ? undefined : json['last_consumed_at'],
        'remainingUses': !exists(json, 'remaining_uses') ? undefined : json['remaining_uses'],
        'subInventoryInstanceId': !exists(json, 'sub_inventory_instance_id') ? undefined : json['sub_inventory_instance_id'],
        'subInventoryItems': !exists(json, 'sub_inventory_items') ? undefined : ((json['sub_inventory_items'] as Array<any>).map(InventoryUserInventoryItemFromJSON)),
    };
}

export function InventoryUserInventoryItemToJSON(value?: InventoryUserInventoryItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'acquired_at': value.acquiredAt,
        'catalog_item_name': value.catalogItemName,
        'expires_at': value.expiresAt,
        'instance_id': value.instanceId,
        'instance_metadata': value.instanceMetadata,
        'is_sub_inventory': value.isSubInventory,
        'last_consumed_at': value.lastConsumedAt,
        'remaining_uses': value.remainingUses,
        'sub_inventory_instance_id': value.subInventoryInstanceId,
        'sub_inventory_items': value.subInventoryItems === undefined ? undefined : ((value.subInventoryItems as Array<any>).map(InventoryUserInventoryItemToJSON)),
    };
}

