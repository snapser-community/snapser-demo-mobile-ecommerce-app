/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryDropValues } from './InventoryDropValues';
import {
    InventoryDropValuesFromJSON,
    InventoryDropValuesFromJSONTyped,
    InventoryDropValuesToJSON,
} from './InventoryDropValues';

/**
 * 
 * @export
 * @interface InventoryDropTableDrops
 */
export interface InventoryDropTableDrops {
    /**
     * Map of currency name to drop values
     * @type {{ [key: string]: InventoryDropValues; }}
     * @memberof InventoryDropTableDrops
     */
    currencies?: { [key: string]: InventoryDropValues; };
    /**
     * Map of item name to drop values
     * @type {{ [key: string]: InventoryDropValues; }}
     * @memberof InventoryDropTableDrops
     */
    items?: { [key: string]: InventoryDropValues; };
    /**
     * Map of trackable energy name to drop values
     * @type {{ [key: string]: InventoryDropValues; }}
     * @memberof InventoryDropTableDrops
     */
    trackablesEnergy?: { [key: string]: InventoryDropValues; };
    /**
     * Map of trackable xp name to drop values
     * @type {{ [key: string]: InventoryDropValues; }}
     * @memberof InventoryDropTableDrops
     */
    trackablesXp?: { [key: string]: InventoryDropValues; };
    /**
     * Weight of item in the drop table
     * @type {number}
     * @memberof InventoryDropTableDrops
     */
    weight: number;
}

/**
 * Check if a given object implements the InventoryDropTableDrops interface.
 */
export function instanceOfInventoryDropTableDrops(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "weight" in value;

    return isInstance;
}

export function InventoryDropTableDropsFromJSON(json: any): InventoryDropTableDrops {
    return InventoryDropTableDropsFromJSONTyped(json, false);
}

export function InventoryDropTableDropsFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryDropTableDrops {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencies': !exists(json, 'currencies') ? undefined : (mapValues(json['currencies'], InventoryDropValuesFromJSON)),
        'items': !exists(json, 'items') ? undefined : (mapValues(json['items'], InventoryDropValuesFromJSON)),
        'trackablesEnergy': !exists(json, 'trackables_energy') ? undefined : (mapValues(json['trackables_energy'], InventoryDropValuesFromJSON)),
        'trackablesXp': !exists(json, 'trackables_xp') ? undefined : (mapValues(json['trackables_xp'], InventoryDropValuesFromJSON)),
        'weight': json['weight'],
    };
}

export function InventoryDropTableDropsToJSON(value?: InventoryDropTableDrops | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currencies': value.currencies === undefined ? undefined : (mapValues(value.currencies, InventoryDropValuesToJSON)),
        'items': value.items === undefined ? undefined : (mapValues(value.items, InventoryDropValuesToJSON)),
        'trackables_energy': value.trackablesEnergy === undefined ? undefined : (mapValues(value.trackablesEnergy, InventoryDropValuesToJSON)),
        'trackables_xp': value.trackablesXp === undefined ? undefined : (mapValues(value.trackablesXp, InventoryDropValuesToJSON)),
        'weight': value.weight,
    };
}

