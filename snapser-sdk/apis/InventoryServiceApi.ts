/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsumeItemRequest,
  ConvertUserCurrencyRequest,
  GrantAndOpenContainerRequest,
  GrantItemsToUserRequest,
  IncrementUserCurrencyRequest,
  InventoryConsumeItemResponse,
  InventoryConvertUserCurrencyResponse,
  InventoryDropTable,
  InventoryEvaluateDropTableResponse,
  InventoryGetContainerResponse,
  InventoryGetCurrencyConversionsResponse,
  InventoryGetItemsResponse,
  InventoryGetUserCurrenciesResponse,
  InventoryGetUserCurrencyStatsResponse,
  InventoryGetUserItemsResponse,
  InventoryGrantAndOpenContainerResponse,
  InventoryGrantDropTableResponse,
  InventoryIncrementUserCurrencyResponse,
  InventoryMoveItemsToSubInventoryResponse,
  InventoryOpenContainerResponse,
  InventoryUnlockContainerResponse,
  InventoryUserInventory,
  InventoryUserInventoryItem,
  MoveItemsToSubInventoryRequest,
  OpenContainerRequest,
  PurchaseItemWithVirtualCurrencyRequest,
  UnlockContainerRequest,
  UpdateUserItemMetadataRequest,
} from '../models/index';
import {
    ConsumeItemRequestFromJSON,
    ConsumeItemRequestToJSON,
    ConvertUserCurrencyRequestFromJSON,
    ConvertUserCurrencyRequestToJSON,
    GrantAndOpenContainerRequestFromJSON,
    GrantAndOpenContainerRequestToJSON,
    GrantItemsToUserRequestFromJSON,
    GrantItemsToUserRequestToJSON,
    IncrementUserCurrencyRequestFromJSON,
    IncrementUserCurrencyRequestToJSON,
    InventoryConsumeItemResponseFromJSON,
    InventoryConsumeItemResponseToJSON,
    InventoryConvertUserCurrencyResponseFromJSON,
    InventoryConvertUserCurrencyResponseToJSON,
    InventoryDropTableFromJSON,
    InventoryDropTableToJSON,
    InventoryEvaluateDropTableResponseFromJSON,
    InventoryEvaluateDropTableResponseToJSON,
    InventoryGetContainerResponseFromJSON,
    InventoryGetContainerResponseToJSON,
    InventoryGetCurrencyConversionsResponseFromJSON,
    InventoryGetCurrencyConversionsResponseToJSON,
    InventoryGetItemsResponseFromJSON,
    InventoryGetItemsResponseToJSON,
    InventoryGetUserCurrenciesResponseFromJSON,
    InventoryGetUserCurrenciesResponseToJSON,
    InventoryGetUserCurrencyStatsResponseFromJSON,
    InventoryGetUserCurrencyStatsResponseToJSON,
    InventoryGetUserItemsResponseFromJSON,
    InventoryGetUserItemsResponseToJSON,
    InventoryGrantAndOpenContainerResponseFromJSON,
    InventoryGrantAndOpenContainerResponseToJSON,
    InventoryGrantDropTableResponseFromJSON,
    InventoryGrantDropTableResponseToJSON,
    InventoryIncrementUserCurrencyResponseFromJSON,
    InventoryIncrementUserCurrencyResponseToJSON,
    InventoryMoveItemsToSubInventoryResponseFromJSON,
    InventoryMoveItemsToSubInventoryResponseToJSON,
    InventoryOpenContainerResponseFromJSON,
    InventoryOpenContainerResponseToJSON,
    InventoryUnlockContainerResponseFromJSON,
    InventoryUnlockContainerResponseToJSON,
    InventoryUserInventoryFromJSON,
    InventoryUserInventoryToJSON,
    InventoryUserInventoryItemFromJSON,
    InventoryUserInventoryItemToJSON,
    MoveItemsToSubInventoryRequestFromJSON,
    MoveItemsToSubInventoryRequestToJSON,
    OpenContainerRequestFromJSON,
    OpenContainerRequestToJSON,
    PurchaseItemWithVirtualCurrencyRequestFromJSON,
    PurchaseItemWithVirtualCurrencyRequestToJSON,
    UnlockContainerRequestFromJSON,
    UnlockContainerRequestToJSON,
    UpdateUserItemMetadataRequestFromJSON,
    UpdateUserItemMetadataRequestToJSON,
} from '../models/index';

export interface InventoryConsumeItemRequest {
    userId: string;
    itemInstanceId: string;
    token: string;
    body: ConsumeItemRequest;
}

export interface InventoryConvertUserCurrencyRequest {
    userId: string;
    token: string;
    body: ConvertUserCurrencyRequest;
}

export interface InventoryDeleteUserItemRequest {
    userId: string;
    itemInstanceId: string;
    token: string;
}

export interface InventoryEvaluateDropTableRequest {
    dropTableName: string;
    userId: string;
    token: string;
}

export interface InventoryGetAllUserItemsRequest {
    userId: string;
    token: string;
    limit?: number;
    offset?: number;
    itemName?: string;
}

export interface InventoryGetContainerRequest {
    containerName: string;
    token: string;
}

export interface InventoryGetCurrencyConversionsRequest {
    token: string;
    fromCurrency?: string;
    toCurrency?: string;
}

export interface InventoryGetDropTableContentsRequest {
    dropTableName: string;
    token: string;
}

export interface InventoryGetItemsRequest {
    token: string;
    limit?: number;
    offset?: number;
    tags?: string;
    className?: string;
    name?: string;
    names?: string;
    type?: string;
}

export interface InventoryGetUserCurrenciesRequest {
    userId: string;
    token: string;
}

export interface InventoryGetUserCurrencyStatsRequest {
    userId: string;
    currencyName: string;
    token: string;
}

export interface InventoryGetUserItemRequest {
    userId: string;
    itemInstanceId: string;
    token: string;
}

export interface InventoryGrantAndOpenContainerRequest {
    userId: string;
    containerName: string;
    token: string;
    body: GrantAndOpenContainerRequest;
}

export interface InventoryGrantDropTableRequest {
    dropTableName: string;
    userId: string;
    token: string;
    escrowId?: string;
    subInventoryInstanceId?: string;
}

export interface InventoryGrantItemsToUserRequest {
    userId: string;
    token: string;
    body: GrantItemsToUserRequest;
}

export interface InventoryIncrementUserCurrencyRequest {
    userId: string;
    currencyName: string;
    token: string;
    body: IncrementUserCurrencyRequest;
}

export interface InventoryMoveItemsToSubInventoryRequest {
    userId: string;
    token: string;
    body: MoveItemsToSubInventoryRequest;
}

export interface InventoryOpenContainerRequest {
    userId: string;
    containerInstanceId: string;
    token: string;
    body: OpenContainerRequest;
}

export interface InventoryPurchaseItemWithVirtualCurrencyRequest {
    userId: string;
    token: string;
    body: PurchaseItemWithVirtualCurrencyRequest;
}

export interface InventoryUnlockContainerRequest {
    userId: string;
    containerInstanceId: string;
    token: string;
    body: UnlockContainerRequest;
}

export interface InventoryUpdateUserItemMetadataRequest {
    userId: string;
    itemInstanceId: string;
    token: string;
    body: UpdateUserItemMetadataRequest;
}

/**
 * 
 */
export class InventoryServiceApi extends runtime.BaseAPI {

    /**
     * Consumes item from user inventory by a count given an instance id
     * User Items
     */
    async inventoryConsumeItemRaw(requestParameters: InventoryConsumeItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryConsumeItemResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryConsumeItem.');
        }

        if (requestParameters.itemInstanceId === null || requestParameters.itemInstanceId === undefined) {
            throw new runtime.RequiredError('itemInstanceId','Required parameter requestParameters.itemInstanceId was null or undefined when calling inventoryConsumeItem.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryConsumeItem.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryConsumeItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-items-consumption/{item_instance_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"item_instance_id"}}`, encodeURIComponent(String(requestParameters.itemInstanceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsumeItemRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryConsumeItemResponseFromJSON(jsonValue));
    }

    /**
     * Consumes item from user inventory by a count given an instance id
     * User Items
     */
    async inventoryConsumeItem(requestParameters: InventoryConsumeItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryConsumeItemResponse> {
        const response = await this.inventoryConsumeItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Convert user currency from one to another
     * User Currency
     */
    async inventoryConvertUserCurrencyRaw(requestParameters: InventoryConvertUserCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryConvertUserCurrencyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryConvertUserCurrency.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryConvertUserCurrency.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryConvertUserCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/currency-conversion`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConvertUserCurrencyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryConvertUserCurrencyResponseFromJSON(jsonValue));
    }

    /**
     * Convert user currency from one to another
     * User Currency
     */
    async inventoryConvertUserCurrency(requestParameters: InventoryConvertUserCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryConvertUserCurrencyResponse> {
        const response = await this.inventoryConvertUserCurrencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes item from user inventory given instance id
     * User Items
     */
    async inventoryDeleteUserItemRaw(requestParameters: InventoryDeleteUserItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryDeleteUserItem.');
        }

        if (requestParameters.itemInstanceId === null || requestParameters.itemInstanceId === undefined) {
            throw new runtime.RequiredError('itemInstanceId','Required parameter requestParameters.itemInstanceId was null or undefined when calling inventoryDeleteUserItem.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryDeleteUserItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-items/{item_instance_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"item_instance_id"}}`, encodeURIComponent(String(requestParameters.itemInstanceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes item from user inventory given instance id
     * User Items
     */
    async inventoryDeleteUserItem(requestParameters: InventoryDeleteUserItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.inventoryDeleteUserItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Evaluate a drop table for a user and store the escrow ID
     * Drop Tables
     */
    async inventoryEvaluateDropTableRaw(requestParameters: InventoryEvaluateDropTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryEvaluateDropTableResponse>> {
        if (requestParameters.dropTableName === null || requestParameters.dropTableName === undefined) {
            throw new runtime.RequiredError('dropTableName','Required parameter requestParameters.dropTableName was null or undefined when calling inventoryEvaluateDropTable.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryEvaluateDropTable.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryEvaluateDropTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/drop-tables/{drop_table_name}/evaluate`.replace(`{${"drop_table_name"}}`, encodeURIComponent(String(requestParameters.dropTableName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryEvaluateDropTableResponseFromJSON(jsonValue));
    }

    /**
     * Evaluate a drop table for a user and store the escrow ID
     * Drop Tables
     */
    async inventoryEvaluateDropTable(requestParameters: InventoryEvaluateDropTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryEvaluateDropTableResponse> {
        const response = await this.inventoryEvaluateDropTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the user items in a paginated manner. Default page size is 1000.
     * User Items
     */
    async inventoryGetAllUserItemsRaw(requestParameters: InventoryGetAllUserItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGetUserItemsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGetAllUserItems.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetAllUserItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.itemName !== undefined) {
            queryParameters['item_name'] = requestParameters.itemName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-items`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGetUserItemsResponseFromJSON(jsonValue));
    }

    /**
     * Gets the user items in a paginated manner. Default page size is 1000.
     * User Items
     */
    async inventoryGetAllUserItems(requestParameters: InventoryGetAllUserItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGetUserItemsResponse> {
        const response = await this.inventoryGetAllUserItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the contents of a container item from the catalog
     * Containers
     */
    async inventoryGetContainerRaw(requestParameters: InventoryGetContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGetContainerResponse>> {
        if (requestParameters.containerName === null || requestParameters.containerName === undefined) {
            throw new runtime.RequiredError('containerName','Required parameter requestParameters.containerName was null or undefined when calling inventoryGetContainer.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/containers/{container_name}`.replace(`{${"container_name"}}`, encodeURIComponent(String(requestParameters.containerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGetContainerResponseFromJSON(jsonValue));
    }

    /**
     * Gets the contents of a container item from the catalog
     * Containers
     */
    async inventoryGetContainer(requestParameters: InventoryGetContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGetContainerResponse> {
        const response = await this.inventoryGetContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get currency conversions
     * Currency Conversions
     */
    async inventoryGetCurrencyConversionsRaw(requestParameters: InventoryGetCurrencyConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGetCurrencyConversionsResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetCurrencyConversions.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromCurrency !== undefined) {
            queryParameters['from_currency'] = requestParameters.fromCurrency;
        }

        if (requestParameters.toCurrency !== undefined) {
            queryParameters['to_currency'] = requestParameters.toCurrency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/currency-conversions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGetCurrencyConversionsResponseFromJSON(jsonValue));
    }

    /**
     * Get currency conversions
     * Currency Conversions
     */
    async inventoryGetCurrencyConversions(requestParameters: InventoryGetCurrencyConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGetCurrencyConversionsResponse> {
        const response = await this.inventoryGetCurrencyConversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a drop table
     * Drop Tables
     */
    async inventoryGetDropTableContentsRaw(requestParameters: InventoryGetDropTableContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryDropTable>> {
        if (requestParameters.dropTableName === null || requestParameters.dropTableName === undefined) {
            throw new runtime.RequiredError('dropTableName','Required parameter requestParameters.dropTableName was null or undefined when calling inventoryGetDropTableContents.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetDropTableContents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/drop-tables/{drop_table_name}`.replace(`{${"drop_table_name"}}`, encodeURIComponent(String(requestParameters.dropTableName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryDropTableFromJSON(jsonValue));
    }

    /**
     * Get a drop table
     * Drop Tables
     */
    async inventoryGetDropTableContents(requestParameters: InventoryGetDropTableContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryDropTable> {
        const response = await this.inventoryGetDropTableContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the items from catalog in a paginated manner. Default page size is 1000.
     * Items
     */
    async inventoryGetItemsRaw(requestParameters: InventoryGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGetItemsResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.tags !== undefined) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.className !== undefined) {
            queryParameters['class_name'] = requestParameters.className;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.names !== undefined) {
            queryParameters['names'] = requestParameters.names;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGetItemsResponseFromJSON(jsonValue));
    }

    /**
     * Gets the items from catalog in a paginated manner. Default page size is 1000.
     * Items
     */
    async inventoryGetItems(requestParameters: InventoryGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGetItemsResponse> {
        const response = await this.inventoryGetItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user currencies
     * User Currency
     */
    async inventoryGetUserCurrenciesRaw(requestParameters: InventoryGetUserCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGetUserCurrenciesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGetUserCurrencies.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetUserCurrencies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/currencies`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGetUserCurrenciesResponseFromJSON(jsonValue));
    }

    /**
     * Get user currencies
     * User Currency
     */
    async inventoryGetUserCurrencies(requestParameters: InventoryGetUserCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGetUserCurrenciesResponse> {
        const response = await this.inventoryGetUserCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user currency stats
     * User Currency
     */
    async inventoryGetUserCurrencyStatsRaw(requestParameters: InventoryGetUserCurrencyStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGetUserCurrencyStatsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGetUserCurrencyStats.');
        }

        if (requestParameters.currencyName === null || requestParameters.currencyName === undefined) {
            throw new runtime.RequiredError('currencyName','Required parameter requestParameters.currencyName was null or undefined when calling inventoryGetUserCurrencyStats.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetUserCurrencyStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/currencies/{currency_name}/stats`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"currency_name"}}`, encodeURIComponent(String(requestParameters.currencyName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGetUserCurrencyStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get user currency stats
     * User Currency
     */
    async inventoryGetUserCurrencyStats(requestParameters: InventoryGetUserCurrencyStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGetUserCurrencyStatsResponse> {
        const response = await this.inventoryGetUserCurrencyStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets item from inventory given instance id
     * User Items
     */
    async inventoryGetUserItemRaw(requestParameters: InventoryGetUserItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryUserInventoryItem>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGetUserItem.');
        }

        if (requestParameters.itemInstanceId === null || requestParameters.itemInstanceId === undefined) {
            throw new runtime.RequiredError('itemInstanceId','Required parameter requestParameters.itemInstanceId was null or undefined when calling inventoryGetUserItem.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGetUserItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-items/{item_instance_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"item_instance_id"}}`, encodeURIComponent(String(requestParameters.itemInstanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryUserInventoryItemFromJSON(jsonValue));
    }

    /**
     * Gets item from inventory given instance id
     * User Items
     */
    async inventoryGetUserItem(requestParameters: InventoryGetUserItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryUserInventoryItem> {
        const response = await this.inventoryGetUserItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grants and opens a container item from user inventory given an item name
     * User Items
     */
    async inventoryGrantAndOpenContainerRaw(requestParameters: InventoryGrantAndOpenContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGrantAndOpenContainerResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGrantAndOpenContainer.');
        }

        if (requestParameters.containerName === null || requestParameters.containerName === undefined) {
            throw new runtime.RequiredError('containerName','Required parameter requestParameters.containerName was null or undefined when calling inventoryGrantAndOpenContainer.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGrantAndOpenContainer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryGrantAndOpenContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/containers/{container_name}/grant-and-open`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"container_name"}}`, encodeURIComponent(String(requestParameters.containerName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GrantAndOpenContainerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGrantAndOpenContainerResponseFromJSON(jsonValue));
    }

    /**
     * Grants and opens a container item from user inventory given an item name
     * User Items
     */
    async inventoryGrantAndOpenContainer(requestParameters: InventoryGrantAndOpenContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGrantAndOpenContainerResponse> {
        const response = await this.inventoryGrantAndOpenContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grant items from a drop table based on a new evaluation or existing escrow ID
     * Drop Tables
     */
    async inventoryGrantDropTableRaw(requestParameters: InventoryGrantDropTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryGrantDropTableResponse>> {
        if (requestParameters.dropTableName === null || requestParameters.dropTableName === undefined) {
            throw new runtime.RequiredError('dropTableName','Required parameter requestParameters.dropTableName was null or undefined when calling inventoryGrantDropTable.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGrantDropTable.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGrantDropTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.escrowId !== undefined) {
            queryParameters['escrow_id'] = requestParameters.escrowId;
        }

        if (requestParameters.subInventoryInstanceId !== undefined) {
            queryParameters['sub_inventory_instance_id'] = requestParameters.subInventoryInstanceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/drop-tables/{drop_table_name}/grant`.replace(`{${"drop_table_name"}}`, encodeURIComponent(String(requestParameters.dropTableName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryGrantDropTableResponseFromJSON(jsonValue));
    }

    /**
     * Grant items from a drop table based on a new evaluation or existing escrow ID
     * Drop Tables
     */
    async inventoryGrantDropTable(requestParameters: InventoryGrantDropTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryGrantDropTableResponse> {
        const response = await this.inventoryGrantDropTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grants the list of items to user, this does not modify currencies
     * User Items
     */
    async inventoryGrantItemsToUserRaw(requestParameters: InventoryGrantItemsToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryUserInventory>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryGrantItemsToUser.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryGrantItemsToUser.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryGrantItemsToUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/items-grant`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GrantItemsToUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryUserInventoryFromJSON(jsonValue));
    }

    /**
     * Grants the list of items to user, this does not modify currencies
     * User Items
     */
    async inventoryGrantItemsToUser(requestParameters: InventoryGrantItemsToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryUserInventory> {
        const response = await this.inventoryGrantItemsToUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Increment or decrement virtual currency of a user
     * User Currency
     */
    async inventoryIncrementUserCurrencyRaw(requestParameters: InventoryIncrementUserCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryIncrementUserCurrencyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryIncrementUserCurrency.');
        }

        if (requestParameters.currencyName === null || requestParameters.currencyName === undefined) {
            throw new runtime.RequiredError('currencyName','Required parameter requestParameters.currencyName was null or undefined when calling inventoryIncrementUserCurrency.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryIncrementUserCurrency.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryIncrementUserCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/currencies/{currency_name}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"currency_name"}}`, encodeURIComponent(String(requestParameters.currencyName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IncrementUserCurrencyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryIncrementUserCurrencyResponseFromJSON(jsonValue));
    }

    /**
     * Increment or decrement virtual currency of a user
     * User Currency
     */
    async inventoryIncrementUserCurrency(requestParameters: InventoryIncrementUserCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryIncrementUserCurrencyResponse> {
        const response = await this.inventoryIncrementUserCurrencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move item into sub-inventory
     * Move item into sub-inventory
     */
    async inventoryMoveItemsToSubInventoryRaw(requestParameters: InventoryMoveItemsToSubInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryMoveItemsToSubInventoryResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryMoveItemsToSubInventory.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryMoveItemsToSubInventory.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryMoveItemsToSubInventory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/sub-inventory/move-items`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MoveItemsToSubInventoryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryMoveItemsToSubInventoryResponseFromJSON(jsonValue));
    }

    /**
     * Move item into sub-inventory
     * Move item into sub-inventory
     */
    async inventoryMoveItemsToSubInventory(requestParameters: InventoryMoveItemsToSubInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryMoveItemsToSubInventoryResponse> {
        const response = await this.inventoryMoveItemsToSubInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Open a container item from user inventory given an instance id
     * User Items
     */
    async inventoryOpenContainerRaw(requestParameters: InventoryOpenContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryOpenContainerResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryOpenContainer.');
        }

        if (requestParameters.containerInstanceId === null || requestParameters.containerInstanceId === undefined) {
            throw new runtime.RequiredError('containerInstanceId','Required parameter requestParameters.containerInstanceId was null or undefined when calling inventoryOpenContainer.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryOpenContainer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryOpenContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-containers/{container_instance_id}/open`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"container_instance_id"}}`, encodeURIComponent(String(requestParameters.containerInstanceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenContainerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryOpenContainerResponseFromJSON(jsonValue));
    }

    /**
     * Open a container item from user inventory given an instance id
     * User Items
     */
    async inventoryOpenContainer(requestParameters: InventoryOpenContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryOpenContainerResponse> {
        const response = await this.inventoryOpenContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Purchase an item with given virtual currency
     * User Items
     */
    async inventoryPurchaseItemWithVirtualCurrencyRaw(requestParameters: InventoryPurchaseItemWithVirtualCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryUserInventoryItem>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryPurchaseItemWithVirtualCurrency.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryPurchaseItemWithVirtualCurrency.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryPurchaseItemWithVirtualCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/items-purchase`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseItemWithVirtualCurrencyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryUserInventoryItemFromJSON(jsonValue));
    }

    /**
     * Purchase an item with given virtual currency
     * User Items
     */
    async inventoryPurchaseItemWithVirtualCurrency(requestParameters: InventoryPurchaseItemWithVirtualCurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryUserInventoryItem> {
        const response = await this.inventoryPurchaseItemWithVirtualCurrencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlocks a container item from user inventory given an instance id and returns items to be granted without granting them
     * User Items
     */
    async inventoryUnlockContainerRaw(requestParameters: InventoryUnlockContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryUnlockContainerResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryUnlockContainer.');
        }

        if (requestParameters.containerInstanceId === null || requestParameters.containerInstanceId === undefined) {
            throw new runtime.RequiredError('containerInstanceId','Required parameter requestParameters.containerInstanceId was null or undefined when calling inventoryUnlockContainer.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryUnlockContainer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryUnlockContainer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-containers/{container_instance_id}/unlock`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"container_instance_id"}}`, encodeURIComponent(String(requestParameters.containerInstanceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlockContainerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryUnlockContainerResponseFromJSON(jsonValue));
    }

    /**
     * Unlocks a container item from user inventory given an instance id and returns items to be granted without granting them
     * User Items
     */
    async inventoryUnlockContainer(requestParameters: InventoryUnlockContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryUnlockContainerResponse> {
        const response = await this.inventoryUnlockContainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the metadata of the user inventory item. Not to be confused with catalog item metadata
     * User Items
     */
    async inventoryUpdateUserItemMetadataRaw(requestParameters: InventoryUpdateUserItemMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryUserInventoryItem>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inventoryUpdateUserItemMetadata.');
        }

        if (requestParameters.itemInstanceId === null || requestParameters.itemInstanceId === undefined) {
            throw new runtime.RequiredError('itemInstanceId','Required parameter requestParameters.itemInstanceId was null or undefined when calling inventoryUpdateUserItemMetadata.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling inventoryUpdateUserItemMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling inventoryUpdateUserItemMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/inventory/users/{user_id}/user-items/{item_instance_id}/metadata`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"item_instance_id"}}`, encodeURIComponent(String(requestParameters.itemInstanceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserItemMetadataRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryUserInventoryItemFromJSON(jsonValue));
    }

    /**
     * Update the metadata of the user inventory item. Not to be confused with catalog item metadata
     * User Items
     */
    async inventoryUpdateUserItemMetadata(requestParameters: InventoryUpdateUserItemMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryUserInventoryItem> {
        const response = await this.inventoryUpdateUserItemMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
