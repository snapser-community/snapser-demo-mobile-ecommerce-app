/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchProfileRequest,
  ProfilesGetProfileResponse,
  ProfilesPatchProfileResponse,
  ProfilesSearchProfilesRequest,
  ProfilesSearchProfilesResponse,
  UpsertProfileRequest,
} from '../models/index';
import {
    PatchProfileRequestFromJSON,
    PatchProfileRequestToJSON,
    ProfilesGetProfileResponseFromJSON,
    ProfilesGetProfileResponseToJSON,
    ProfilesPatchProfileResponseFromJSON,
    ProfilesPatchProfileResponseToJSON,
    ProfilesSearchProfilesRequestFromJSON,
    ProfilesSearchProfilesRequestToJSON,
    ProfilesSearchProfilesResponseFromJSON,
    ProfilesSearchProfilesResponseToJSON,
    UpsertProfileRequestFromJSON,
    UpsertProfileRequestToJSON,
} from '../models/index';

export interface ProfilesDeleteProfileRequest {
    userId: string;
    token: string;
}

export interface ProfilesGetProfileRequest {
    userId: string;
    token: string;
}

export interface ProfilesPatchProfileRequest {
    userId: string;
    token: string;
    body: PatchProfileRequest;
}

export interface ProfilesSearchProfilesOperationRequest {
    token: string;
    body: ProfilesSearchProfilesRequest;
}

export interface ProfilesUpsertProfileRequest {
    userId: string;
    token: string;
    body: UpsertProfileRequest;
}

/**
 * 
 */
export class ProfilesServiceApi extends runtime.BaseAPI {

    /**
     * Deletes a user\'s profile
     * User Profile
     */
    async profilesDeleteProfileRaw(requestParameters: ProfilesDeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling profilesDeleteProfile.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling profilesDeleteProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/profiles/user/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a user\'s profile
     * User Profile
     */
    async profilesDeleteProfile(requestParameters: ProfilesDeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.profilesDeleteProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a user\'s profile
     * User Profile
     */
    async profilesGetProfileRaw(requestParameters: ProfilesGetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfilesGetProfileResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling profilesGetProfile.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling profilesGetProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/profiles/user/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfilesGetProfileResponseFromJSON(jsonValue));
    }

    /**
     * Gets a user\'s profile
     * User Profile
     */
    async profilesGetProfile(requestParameters: ProfilesGetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfilesGetProfileResponse> {
        const response = await this.profilesGetProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patches a user\'s profile
     * User Profile
     */
    async profilesPatchProfileRaw(requestParameters: ProfilesPatchProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfilesPatchProfileResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling profilesPatchProfile.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling profilesPatchProfile.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling profilesPatchProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/profiles/user/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchProfileRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfilesPatchProfileResponseFromJSON(jsonValue));
    }

    /**
     * Patches a user\'s profile
     * User Profile
     */
    async profilesPatchProfile(requestParameters: ProfilesPatchProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfilesPatchProfileResponse> {
        const response = await this.profilesPatchProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for user profiles
     * Search
     */
    async profilesSearchProfilesRaw(requestParameters: ProfilesSearchProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfilesSearchProfilesResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling profilesSearchProfiles.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling profilesSearchProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/profiles/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfilesSearchProfilesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfilesSearchProfilesResponseFromJSON(jsonValue));
    }

    /**
     * Searches for user profiles
     * Search
     */
    async profilesSearchProfiles(requestParameters: ProfilesSearchProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfilesSearchProfilesResponse> {
        const response = await this.profilesSearchProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert or update a user\'s profile
     * User Profile
     */
    async profilesUpsertProfileRaw(requestParameters: ProfilesUpsertProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling profilesUpsertProfile.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling profilesUpsertProfile.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling profilesUpsertProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/profiles/user/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertProfileRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Insert or update a user\'s profile
     * User Profile
     */
    async profilesUpsertProfile(requestParameters: ProfilesUpsertProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.profilesUpsertProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
